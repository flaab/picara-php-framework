<?php


/**
* Controller: 	Scaffold_<modelname>
*
* @note         Generated by the Scaffold script
* @note         The code is very commented, change it as you wish
*/

class Scaffold_<modelname>WebController extends MyAdminController
{
    /**
    * Scaffolded model
    */
	var $model = '<modelname>';

    /**
    * Loads dependencies
    */
    var $load = array('Watcher');

    /**
    * After action callbacks
    */
    var $after_action = array('_other_scaffolds','_set_custom_menu','_is_searchable');

    /**
    * Before action callbacks
    */ 
    var $before_action = array('load_model_config');

    /**
    * Config object for scaffolded model
    */
    var $model_config;

    /**
    * Fields of represented table
    */
    var $fields;
    
    /**
    * Layout
    */
    var $layout = 'admin';
    
    /**
    * Allowed sessions (else 403 is raised) 
    */
    var $session_allowed = array(ADMIN_SESSION);    
    
    /**
    * List of allowed IPs (else 403 is raised)
    */
    var $ips_allowed = array();
    
    /**
    * Config file of the adminsite
    */
    var $config_file = 'adminsite.yml';

    //--------------------------------------------------------
	
    /*
	* Paginates all entries according model configuration or user interaction
    *
    * @param    int    $page
	*/

	public function index($page = 1)
    {
        // Check permission
        if(!Pi_session::check_permission($this->model, 'list'))
        {
            $this->flash->validation_error("You don't have permission to view the <strong>". strtolower($this->model) ."</strong> list.");
            $this->core->redirect('admin/welcome');
        }

        // Order interaction
        $this->_interact_order();

	 	// Put window title
	 	$this->appendTitle('Scaffold ' . CONNECTOR . $this->model_config->display ." list");
	    $this->set('noindex', true);

	 	// Scaffolding has a different modelsnap
	 	$modelsnap = VIEW . $this->request['controller'] . '/' . SCAFFOLDSNAPFILE;
	 	
	 	// Scaffolding needs the list of displayed fields
        $this->set('fields', $this->fields);
        
        // Set hidden and listed fields
        $this->set('hidden_fields', $this->model_config->scaffold->hidden);
        $this->set('list_fields', $this->model_config->scaffold->list);

	    //===========================================================
        // Pagination is performed
        //===========================================================
 	
        // Cardinality
	 	$total = $this->db->query->getAll($this->model, NULL, NULL, NULL, false, true);
        
        // Pagination set up
        $this->pagination_setup($this->model, $page, $total);
	 	
        // Obtain elements to show for this page
	 	$collection = $this->db->query->getAll($this->model, $this->pagination['order'], $this->pagination['first_result'], $this->pagination['elements'], false, false, $this->pagination['direction']);

        // Pagination performance
        $this->pagination_contents($collection, $this->link['controller'] . '/index/', NULL, $modelsnap);

        // Set our specific view
        $this->setView($this->request['controller'] .'/index');  
        
        // Pagination commit
        $this->pagination_commit();
        
        // Modelname
        $this->set('modelname', $this->model);
        $this->set('modeldisplay', $this->model_config->display);

        //===========================================================
        // Export result to other formats if requested
        //===========================================================

        if(isset($_POST['export']))
        {
            // If all results must be exported, collection changes
            if($_POST['range'] != 'this_page')
                $collection = $this->db->query->getAll($this->model, $this->pagination['order']);
            
            // Export as xml
            if($_POST['format'] == "Xml")
            {
                $rpf = $collection->toXml();
                $this->response_as_xml($rpf);
                die;
            }
            
            // Export as xml
            if($_POST['format'] == "Csv")
            {
                $rpf = $collection->toCsv();
                $this->response_as_csv($rpf);
            }
            
            // Export as yml
            if($_POST['format'] == "Yaml")
            {
                $rpf = $collection->toYaml();
                $this->response_as_yaml($rpf);
            }
            
            // Export as json
            if($_POST['format'] == "Json")
            {
                $rpf = $collection->toJson();
                $this->response_as_json($rpf);
            }
       }
	}

    //--------------------------------------------------------
       
    /**
    * Views desired object
    *
    * @param    int    $view
    */

    public function view($id)
    {
        // Check permission
        if(!Pi_session::check_permission($this->model, 'view'))
        {
            $this->flash->validation_error("You don't have permission to view <strong>". strtolower($this->model) ."</strong> records.");
            $this->core->redirect('admin/welcome');
        }

		// Window title and modelname
        $this->setTitle(TITLE . CONNECTOR . "Scaffold ". CONNECTOR . $this->model_config->display . CONNECTOR . "View");
        $this->set('modelname', $this->model);
        $this->set('modeldisplay', $this->model_config->display);
	    $this->set('noindex', true);
		
		// Attemp to create the object
        $object = new $this->model($id);

		// Check if it exists
		if($object->failed())
			$this->core->abort('Requested record does not exist.', 'Record not found');

        // Set to array
        $model['Data'] = $object->toArray();
        
        // Foreign keys
        $fks = $this->metadata->get_foreign_fields($this->model);
        
        // Creates the list to other models to link to
        foreach($fks as $fk)
        {
            $modelname = $this->metadata->get_relationship_name_from_fk($this->model, $fk, true); 
            if(Pi_loader::model_exists($modelname))
            {
                $link_to[$fk] = $model;
                if(!empty($model['Data'][$fk]))
                {
                    $rel_obj = new $modelname($model['Data'][$fk]);
                    $model['Belongings'][$modelname] = $rel_obj->getValueString();
                } else {
                    $model['Belongings'][$modelname] = "Undefined";
                }
                unset($model['Data'][$fk]);
            }
        }
        
        // Generate N-M
        $n_m = $this->metadata->get_n_m_list($this->model, $object->fields->id, true);
        foreach($n_m as $rel => $nmmodel)
        {
            foreach($nmmodel as $key => $arr)
            {
                foreach($arr as $v)
                {
                    $model['Associations'][$key][] = $v['value'];
                    unset($model['Data'][$key]);
                }
                $model['Associations'][$key] = implode(", ", $model['Associations'][$key]);
            }
        } 
        
        // Images
        $img['main'] = $object->get_main_image(); 
        $img['extra'] = $object->get_extra_images(); 

        // To view
        $this->set('groups', array("Belongings","Data","Associations"));
        $this->set('images', $img);
        $this->set('model', $model);
        $this->set('model_actions', $object->model_actions);
    }

    //--------------------------------------------------------

    /**
    * Scaffolds by a search string using the model search configuration
    *
    * @param    string    $search
    * @param    int       $page
    */

    public function search($search = NULL, $page = 1)
    {
        // Check permission
        if(!Pi_session::check_permission($this->model, 'list'))
        {
            $this->flash->validation_error("You don't have permission to view the <strong>". strtolower($this->model) ."</strong> list.");
            $this->core->redirect('admin/welcome');
        }
        
        // If search parameter is null, post search will be tried to fetch
        if(isset($_POST['search'])) $search = $_POST['search'];

        // Check if model is searchable first
        if(!$this->metadata->is_searchable($this->model))
        {
            $this->flash->validation_error('No searchable fields for model <strong>'. strtolower($this->model) .'</strong>. Add them at '. MODELCONFIG . strtolower($this->model) .'.yml', E_USER_ERROR);
            $this->core->redirect($this->link['controller']);
        }
        
        $this->set('modelname', $this->model);
        $this->set('modeldisplay', $this->model_config->display);

        // Check for search string length
        if(strlen($search) < MIN_SEARCH_STRING_LENGTH)
        {
            $this->flash->validation_error("The string '$search' is too short to make a search");
            $this->core->redirect($this->link['controller']);
        }

        // Nice search string
        $nice_search = str_replace(SEARCH_CONNECTOR, ' ', $search);

        // Order interaction
        $this->_interact_order();

	 	// Put window title
	 	$this->appendTitle('Scaffold ' . CONNECTOR . $this->model_config->display . CONNECTOR . 'Searching "'. $nice_search .'"');
	    $this->set('noindex', true);
	 	
	 	// Scaffolding has a different modelsnap
	 	$modelsnap = VIEW . $this->request['controller'] . '/' . SCAFFOLDSNAPFILE;
	 	
	 	// Scaffolding needs the list of displayed fields
        $this->set('fields', $this->fields);

        // Set hidden and listed fields
        $this->set('hidden_fields', $this->model_config->scaffold->hidden);
        $this->set('list_fields', $this->model_config->scaffold->list);
        
        // Nice search to view
        $this->set('nice_search', $nice_search);

	    //===========================================================
        // Pagination is performed
        //===========================================================
 	
        // Cardinality
	 	$total = $this->db->query->performSearch($this->model, $nice_search, NULL, NULL, NULL, NULL, true);
        
        // No results
        if($total == 0)
        {
            $this->flash->addWarning('No results found for "'. $nice_search .'" in <b>'. strtolower($this->model) .'</b>');
            $this->core->redirect($this->link['controller']);
            die;
        }

        // Pagination set up
        $this->pagination_setup($this->model, $page, $total);

	 	// Obtain elements to show for this page
	 	$collection = $this->db->query->performSearch($this->model, $nice_search, $this->pagination['order'], $this->pagination['first_result'], $this->pagination['elements'], $this->pagination['direction']);

        // Pagination performance
        $this->pagination_contents($collection, $this->link['controller'] . '/search/'. $nice_search . '/', NULL, $modelsnap);

        // Set our specific view
        $this->setView($this->request['controller'] .'/search');  
        
        // Pagination commit
        $this->pagination_commit();

        //===========================================================
        // Export result to other formats if requested
        //===========================================================

        if(isset($_POST['export']))
        {
            if($_POST['range'] != 'this_page')
                $collection = $this->db->query->performSearch($this->model, $nice_search);

            // Export as xml
            if($_POST['format'] == "Xml")
            {
                $rpf = $collection->toXml();
                $this->response_as_xml($rpf);
                die;
            }
            
            // Export as xml
            if($_POST['format'] == "Csv")
            {
                $rpf = $collection->toCsv();
                $this->response_as_csv($rpf);
            }
            
            // Export as yml
            if($_POST['format'] == "Yaml")
            {
                $rpf = $collection->toYaml();
                $this->response_as_yaml($rpf);
            }
            
            // Export as json
            if($_POST['format'] == "Json")
            {
                $rpf = $collection->toJson();
                $this->response_as_json($rpf);
            }
        }
    }
	
    //--------------------------------------------------------
	
    /**
	* Generates a form to insert new entries for this model, validating data according model configuration
	*/

	public function insert()
	{
        // Check permission
        if(!Pi_session::check_permission($this->model, 'insert'))
        {
            $this->flash->validation_error("You don't have permission to insert <strong>". strtolower($this->model) ."</strong> records.");
            $this->core->redirect('admin/welcome');
        }
        
        // Sets window title
		$this->setTitle(TITLE . CONNECTOR . "Scaffold " . CONNECTOR . $this->model_config->display . CONNECTOR . "Create");
	    $this->set('noindex', true);
		
        // Modelname to view
        $this->set('modelname', $this->model);
        $this->set('modeldisplay', $this->model_config->display);
		
        // Obtain n-m relationships and set them to the view
        $n_m = $this->metadata->get_n_m_list($this->model);
        $this->set('n_m', $n_m);
		
        // Post treatment
        if(isset($_POST['submit']))
		{
			// Local posted data
			$postedData= Pi_scaffold::process($_POST['model']);
			
			// Instance to be inserted
			$object = new $this->model($postedData);
		
            // Image upload
            $image_upload = false;

            // Validation already made, now, image validating
            if(isset($_FILES[MAIN_IMAGE_INPUT_NAME]) && $_FILES[MAIN_IMAGE_INPUT_NAME]['error'] != 4)
            {   
                // Switch on
                $image_upload = true; 

                // Validation
                $object->validate_image($_FILES[MAIN_IMAGE_INPUT_NAME]);            
            }

			// Validation (including uploaded image)
			if($object->validation_failed())
			{
				$this->flash->validation_error($object->get_validation_errors());
				return;
			}
			
			// If everything okay...the insert will pe performed
			if($object->insert())
			    $this->flash->success("New <b>". strtolower($this->model) ."</b> was succesfully created");

			// Check if insertion failed
			if($object->failed())
			{
				$this->flash->validation_error($object->getErrorStore());
				return;
			}

            // Image uploading if necessary
            if($image_upload == true)
            {
                $object->add_main_image($_FILES[MAIN_IMAGE_INPUT_NAME]);
            }

            // Process n_m for this newly created object
            $this->_process_n_m($object->fields->id);

            // Redirection
            $this->core->redirect($this->link['controller']);
		}
	}
	
    //--------------------------------------------------------
	
	/*
	* Generates a form to update an entry for the table, validation data according model configuration
    *
    * @param    int    $id
	*/

	public function update($id)
	{
        // Check permission
        if(!Pi_session::check_permission($this->model, 'update'))
        {
            $this->flash->validation_error("You don't have permission to update <strong>". strtolower($this->model) ."</strong> records.");
            $this->core->redirect('admin/welcome');
        }
        
        // Window title and modelname
        $this->setTitle(TITLE . CONNECTOR . "Scaffold ". CONNECTOR . $this->model_config->display . CONNECTOR . "Edit");
        $this->set('modelname', $this->model);
        $this->set('modeldisplay', $this->model_config->display);
	    $this->set('noindex', true);
		
		// Attemp to create the object
		$object = new $this->model($id);
	
        // Check if it exists
		if($object->failed())
		{
			$this->core->abort('Requested record does not exist.', 'Record not found');
			return;
		}
		
        // Obtain n-m relationships and set them to the view
        $n_m = $this->metadata->get_n_m_list($this->model, $id);
        $this->set('n_m', $n_m);
	    	
        //  Let the view know if this model has extra images enabled
        $this->set('extra_images', $this->model_config->images->extra->enabled);

        // Append file blocks
        $this->set('blocks', $object->get_blocks());
		
		// Post treatment
        if(isset($_POST['submit']))
		{
			// Local var with the posted info
			$objectData= Pi_scaffold::process($_POST['model']);
		    
			// We assign all new fields to our object
			$object->changeVars($objectData);
			
            // Image upload
            $image_upload = false;
            
            // Validation already made, now, image validating
            if(isset($_FILES[MAIN_IMAGE_INPUT_NAME]) && $_FILES[MAIN_IMAGE_INPUT_NAME]['error'] != 4)
            {   
                // Switch on
                $image_upload = true; 

                // Validation
                $object->validate_image($_FILES[MAIN_IMAGE_INPUT_NAME]);            
            }

			// We check for validation errors
			if($object->validation_failed())
			{
				$this->flash->validation_error($object->get_validation_errors());
				
				// It does. We now pass all of it's info to the view in an hash
				foreach($object->getFields() as $field)
					$objectData[$field] = $object->fields->$field;
				
				// This makes all fields to appear in the form elements when updating
				$this->set("model", $objectData);
				
				return;
			}
			
			// If everything okay...the insert will pe performed
			if($object->update())
			    $this->flash->success("<b>". ucfirst($this->model) ."</b> was succesfully updated");

			// If the insertion failed, error
			if($object->failed())
			{
				$this->flash->validation_error($object->getErrorStore());
				return;
			}
			
            // Image uploading or deletion if neccesary
            if($image_upload == true)
            {
                $object->add_main_image($_FILES[MAIN_IMAGE_INPUT_NAME]);

            } else {

                // Deletion might have been requested
                if(isset($_POST[DELETE_MAIN_IMAGE]))
                {
                    // Will crash if no permissions
                    $object->delete_main_image();
                }
            }
            
            // Treat n-m associations
            $this->_process_n_m($id);
            
            // New relationships must be set again
            $n_m = $this->metadata->get_n_m_list($this->model, $id);
            $this->set('n_m', $n_m);
		}
		
		// Delegating all information to the view
		foreach($object->getFields() as $field)
		{
			$objectData[$field] = $object->fields->$field;
		}

		// Whole model delegated to view
		$this->set("model", $objectData);
        $this->set('model_actions', $object->model_actions);
	}	
	
    //--------------------------------------------------------

	/*
	* Deletes received entry from database
    *
    * @param    int    $id
	*/

	public function delete($id)
	{
        // Check permission
        if(!Pi_session::check_permission($this->model, 'delete'))
        {
            $this->flash->validation_error("You don't have permission to delete <strong>". strtolower($this->model) ."</strong> records.");
            $this->core->redirect('admin/welcome');
        }
        
        // Attempt to create the object
		$object = new $this->model($id);
		
		// Check if it exists
		if($object->failed())
		{
			$this->core->abort('Requested record does not exist.', 'Record not found');
			return;
		}
		
		// Attemp to delete it
		$object->delete();
		
		// Check transaction failed
		if($object->failed())
		{
			$this->flash->error($object->getErrorStore());
			return;
		}

        // Name
        $this->set('modelname', $this->model);
        $this->set('modeldisplay', $this->model_config->display);
		
		// Everything ok
        $this->flash->success("<b>". ucfirst($this->model) ."</b> has been succesfully deleted.");
		
		// Redirect to list
		$this->core->redirect($this->link['controller']);
	}

    //--------------------------------------------------------

    /**
    * File blocks editor
    *
    * @param    int       $id
    * @param    string    $block
    */

    public function block($id, $block)
    {
        // Check permission
        if(!Pi_session::check_permission($this->model, 'update'))
        {
            $this->flash->validation_error("You don't have permission to update <strong>". strtolower($this->model) ."</strong> records.");
            $this->core->redirect('admin/welcome');
        }
        
        // Put window title
	 	$this->appendTitle('Scaffold ' . CONNECTOR . $this->model_config->display . CONNECTOR . 'File blocks' . CONNECTOR . ucfirst($block));
	    $this->set('noindex', true);

        // If no extra images allowed
        if($this->model_config->files->enabled != true)
            trigger_error('The model '. strtolower($this->model) .' does not have file blocks enabled', E_USER_ERROR);

        // Got here means its enabled
		$object = new $this->model($id);
		
        // Name
        $this->set('modelname', $this->model);
        $this->set('modeldisplay', $this->model_config->display);
        
        // Check if it exists
		if($object->failed())
		{
			$this->core->abort('Requested record does not exist.', 'Record not found');
			return;
		}

        // Modelname and values
        $this->set('model', $object->toArray());
        $this->set('modelname', $this->model);
        $this->set('block', $block);

        // Loads all files
        $files = $object->get_files($block);

        //===========================================================
        // Delete request
        //===========================================================

        if(isset($_POST['delete']))
        {
            // Counter
            $cont = 0;

            // Delete all selected images
            foreach($_POST['delete'] as $id => $value_we_do_not_care)
            {
                // Obtain pic name
                $file_name = preg_replace("/^([^\/]+\/)+/", '', $files[$id]);

                // Delete it
                if($object->delete_file($block, $file_name))
                    $cont++;
            }

            // Msg
            $this->flash->success("Selected files has been successfully deleted.");

            // Images list must be updated
            $files = $object->get_files($block);
        }

        // Images to view
        $this->set('files', $files);
        
        //===========================================================
        // Upload request
        //===========================================================

        // If a file has been uploaded
        if(!empty($_FILES[UPLOAD_FILE_INPUT_NAME]['tmp_name']) && $_FILES[MAIN_IMAGE_INPUT_NAME]['error'] != 4)
        {
            // Validation
            $object->validate_file($block, $_FILES[UPLOAD_FILE_INPUT_NAME]);

            // If validation failed
            if($object->validation_failed())
            {
                $this->flash->validation_error($object->get_validation_errors());
                return;
            }

            // Validation ok
            if($object->add_file($block, $_FILES[UPLOAD_FILE_INPUT_NAME]))
                $this->flash->success('File successfully uploaded.');

            // Images list must be updated
            $files = $object->get_files($block);
        
            // Images to view
            $this->set('files', $files);
        }
    }
    
    //--------------------------------------------------------

    /**
    * Performs a pagination by a foreign key value
    *
    * @param    string    $model
    * @param    int       $value
    * @param    int       $page
    */

    public function by($model, $value, $page = 1)
    {
        // Check permission
        if(!Pi_session::check_permission($this->model, 'list'))
        {
            $this->flash->validation_error("You don't have permission to list <strong>". strtolower($this->model) ."</strong> records.");
            $this->core->redirect('admin/welcome');
        }
        
        // Order interaction
        $this->_interact_order();

	 	// Put window title
	 	$this->appendTitle('Scaffold ' . CONNECTOR . $this->model_config->display . CONNECTOR . 'By '. ucfirst($model));
	    $this->set('noindex', true);
	 	
	 	// Scaffolding has a different modelsnap
	 	$modelsnap = VIEW . $this->request['controller'] . '/' . SCAFFOLDSNAPFILE;
	 	
	 	// Scaffolding needs the list of displayed fields
        $this->set('fields', $this->fields);

        // Set hidden and listed fields
        $this->set('hidden_fields', $this->model_config->scaffold->hidden);
        $this->set('list_fields', $this->model_config->scaffold->list);
        
        // Foreign key for related model
        $fk = $this->metadata->get_relationship_fk($this->model, $model);
    
        // Related object creation
        $related_obj = new $model($value);
        if($related_obj->failed())
        {
            $this->flash->validation_error('Requested relationship does not exist (id = '. $value .')');
            $this->core->redirect($this->request['controller']);
        }

        // Search info delegated to view
        $this->set('related_display', $related_obj->getValueString());

        // Related model name
        $this->set('related_modelname', $model);
        $this->set('modelname', $this->model);

        // Value
        $this->set('related_value', $value);

	    //===========================================================
        // Pagination is performed
        //===========================================================
        
        // Cardinality
	 	$total = $this->db->query->getNumRowsOfSearch($fk, $value, $this->model, false, $this->pagination['first_result'], $this->pagination['elements']);
        
        // Pagination set up
        $this->pagination_setup($this->model, $page, $total);
	 	
        // Obtain elements to show for this page
	 	$collection = $this->db->query->searchBy($fk, $value, $this->model, false, false, $this->pagination['first_result'], $this->pagination['elements'], $this->pagination['order'], $this->pagination['direction']);

        // Pagination performance
        $this->pagination_contents($collection, $this->request['controller'] . '/by/'. $model . '/'. $value . '/', NULL, $modelsnap);

        // Set our specific view
        $this->setView($this->request['controller'] .'/by');  
        
        // Pagination commit
        $this->pagination_commit();

        //===========================================================
        // Export result to other formats if requested
        //===========================================================

        if(isset($_POST['export']))
        {
            // If all results must be exported, collection changes
            if($_POST['range'] != 'this_page')
                $collection = $this->db->query->searchBy($fk, $value, $this->model, false, false, NULL, NULL, $this->pagination['order'],$his->pagination['direction']);
           
            // Export
            $this->_export($collection, $_POST['format']);
       }
    }

    //--------------------------------------------------------

    //--------------------------------------------------------

    /**
    * Extra images editor
    *
    * @param    int    $id
    */

    public function extra_images($id)
    {
        // Check permission
        if(!Pi_session::check_permission($this->model, 'update'))
        {
            $this->flash->validation_error("You don't have permission to update <strong>". strtolower($this->model) ."</strong> records.");
            $this->core->redirect('admin/welcome');
        }
        
        // Put window title
	 	$this->appendTitle('Scaffold ' . CONNECTOR . $this->model_config->display . CONNECTOR . 'Extra images');
	    $this->set('noindex', true);

        // If no extra images allowed
        if($this->model_config->images->extra->enabled != true)
            trigger_error('The model '. strtolower($this->model) .' does not have extra images feature enabled', E_USER_ERROR);

        // Got here means its enabled
		$object = new $this->model($id);
		
		// Check if it exists
		if($object->failed())
		{
			$this->core->abort('Requested record does not exist.', 'Record not found');
			return;
		}

        // Modelname and values
        $this->set('model', $object->toArray());
        $this->set('modelname', $this->model);
        $this->set('modeldisplay', $this->model_config->display);

        // Loads all extra images
        $images = $object->get_extra_images();
        
        //===========================================================
        // Delete request
        //===========================================================

        if(isset($_POST['delete']))
        {
            // Counter
            $cont = 0;

            // Delete all selected images
            foreach($_POST['delete'] as $id => $value_we_do_not_care)
            {
                // Obtain pic name
                $pic_name = preg_replace("/^([^\/]+\/)+/", '', $images[$id]['image']);

                // Delete it
                if($object->delete_extra_image($pic_name))
                    $cont++;
            }

            // Msg
            $this->flash->success("Selected images have been successfully deleted.");

            // Images list must be updated
            $images = $object->get_extra_images();
        }

        // Images to view
        $this->set('images', $images);
        
        //===========================================================
        // Upload request
        //===========================================================

        // Validation already made, now, image validating
        if(!empty($_FILES[UPLOAD_FILE_INPUT_NAME]['tmp_name']) && $_FILES[MAIN_IMAGE_INPUT_NAME]['error'] != 4)
        {
            // Validation
            $object->validate_image($_FILES[UPLOAD_FILE_INPUT_NAME]);

            // If validation failed
            if($object->validation_failed())
            {
                $this->flash->validation_error($object->get_validation_errors());
                return;
            }

            // Validation ok, upload
            if($object->add_extra_image($_FILES[UPLOAD_FILE_INPUT_NAME]))
            {
                $this->flash->success('Image successfully uploaded.');
            
            // Failed; probably limit reached
            } else {
                $this->flash->validation_error($object->get_validation_errors());
                return;
            }

            // Images list must be updated
            $images = $object->get_extra_images();
        
            // Images to view
            $this->set('images', $images);
        }
    }

    //--------------------------------------------------------

    /**
    * Loads model configuration into the object (Callback)
    */

    protected function load_model_config()
    {
        $this->model_config = $this->metadata->config->get($this->model);
        $this->fields = $this->metadata->read_columns($this->model);
    }

    //--------------------------------------------------------

    /**
    * Delivers other scaffolds to the view grouped by connection
    */
    
    protected function _other_scaffolds()
    {
        // Get other scaffolds
        $other = $this->watcher->get_scaffolded_models($this->model);
         
        // Response array
        $res = array();

        // A nice array containing class name, display name and controller must be provided
        if(is_array($other))
        {
            foreach($other as $class => $controller)
            {
                // Read config
                $config = $this->metadata->config->get($class);

                // Variables
                $model = $class;
                $connection = $config->connection;
                
                // Check permissions
                if(Pi_session::check_permission($model, 'list'))
                { 
                    // Store
                    $res[$connection][$model] = array(
                        'controller' => str_replace("_",'-',$controller),
                        'display'    => $config->display
                    );
                }
            }
        }

        // Read has many
        $has_many = $this->metadata->get_hasmany_related_models($this->model);
        for($i = 0; $i < count($has_many); $i++) $has_many[$i] = strtolower($has_many[$i]);
        $has_scaffolded_many = array();
        
        // Iterate both to deliver to the view only those which are scaffolded
        foreach($res as $conn => $data)
        {
            foreach($data as $model => $subdata)
            {
                if(in_array(strtolower($model), $has_many))
                    $has_scaffolded_many[$model] = $subdata['controller'];
            }
        }
        
        // To view
        $this->set('other_scaffolds', $res);
        $this->set('navigate_has_many', $has_scaffolded_many);
    }
    
    //--------------------------------------------------------
    
    /**
    * Sets custom navigation menus from my admin controller.
    * This menu is declared at app/lib/myadmincontroller.php
    */

    protected function _set_custom_menu()
    {
        // Get logged users menu
        if(Pi_session::check(ADMIN_SESSION))
        {
            $menu_allowed = $this->session->read('menus');
            $user_type = $this->session->read('type');
            if($user_type != 'superuser') // superuser access all menus
            {
                foreach($this->config['navigation'] as $menu => $content)
                    if(!in_array($menu, $menu_allowed))
                        unset($this->config['navigation'][$menu]);
            }
            $this->set("custom_menu", $this->config['navigation']);
        }
    }

    //--------------------------------------------------------

    /**
    * Handles user interaction to change the model's order
    */

    private function _interact_order()
    {
        // If pagination stuff must be changed
        if(isset($_POST['change_elements']))
        {
            $this->model_config->pagination->direction = $_POST['orientation'];
            $this->model_config->pagination->elements = $_POST['elements'];
            if(isset($_POST['order']))  $this->model_config->pagination->order = $_POST['order'];
            $this->metadata->config->permanent_for_session($this->model);
        }
    }

    //--------------------------------------------------------

    /**
    * Receives a collection and a export format and redirects to the
    * export view delegating all neccesary elements.
    *
    * @param    Pi_modelcollection    $collection
    * @param    string                $format
    */

    private function _export($collection, $format)
    {
        // Function to call
        $function = 'To' . $format;

        // Contents
        $export_content = $collection->{$function}();

        // Results to voew
        $this->set('export_content', $export_content);

        // Exported format
        $this->set('format', $format);

        // View and title
	 	$this->appendTitle('Scaffold ' . CONNECTOR . $this->model_config->display . CONNECTOR . 'Export');
    }

    //--------------------------------------------------------

    /**
    * Process n-m associations for current model
    *
    * @param    int    $id
    * @param    bool   $remove_untreated
    */

    private function _process_n_m($id, $remove_untreated = true)
    {
        // Tracker for n-m relationships treated
        $treated_relationships = array();

        // Checking N-M relationships
        if($_POST['related'] != NULL)
        {
            // Local work
            $related = $_POST['related'];
            
            // Foreach related
            foreach($related as $model => $content)
            {
                // Store this n-m relationship as treated
                $treated_relationships[] = $model;

                // Foreach model
                foreach($content as $foreign_model => $elements)
                {
                    // All associations must be queried by the foreign_model
                    $other_fk = $this->metadata->get_relationship_fk($model, $foreign_model);
                    $my_fk = $this->metadata->get_relationship_fk($model, $this->model);
                    
                    // Query
                    $assocs = $this->db->query->getWhere($model, $my_fk .'='. $id);
                    
                    // Array storing all treated items to avoid duplicated insertions
                    $treated = array();

                    // Each object is going to deleted, or leaved intact
                    foreach($assocs as $assoc_object)
                    {
                        // Mark as treated
                        $treated[] = $assoc_object->fields->{$other_fk};
                        
                        // If this item has not been received, it should be deleted
                        if(!in_array($assoc_object->fields->{$other_fk}, $elements))
                            $assoc_object->delete();
                    }
                    
                    // Calculates all other left elements to insert
                    $to_insert = array_diff($elements, $treated);
                    
                    // Create and insert them
                    foreach($to_insert as $fk_value)
                    {
                        // Object array
                        $data = array(
                            $my_fk      => $id,
                            $other_fk   => $fk_value
                        );

                        // New object
                        $new_obj = new $model($data);
                        
                        // Insertion
                        $new_obj->insert();
                    }
                }
            }
        }
        
        // Remove all n-m assocs which list was left blank
        if($remove_untreated == true)
        {
            // Retrieve n-m list
            $n_m = $this->metadata->get_n_m_list($this->model);
            
            // Once here, we must delete al entries from all non-treated n-m relationships
            $to_delete_all = array_diff(array_keys($n_m), $treated_relationships);
            
            // Delete them all
            foreach($to_delete_all as $model)
            {
                // Obtain all of them
                $my_fk = $this->metadata->get_relationship_fk($model, $this->model);
                        
                // Query
                $assocs = $this->db->query->getWhere($model, $my_fk .'='. $id);

                // Delete
                $assocs->delete_all();
            }
        }
    }
    
    //--------------------------------------------------------
    
    /** 
    * Handles the parametrized execution of a model action.
    * 
    * @param    int     id      Model ID
    * @param    string  $actionname Action function name
    */
    public function action($id, $actionname)
    {
        // Check permission
        if(!Pi_session::check_permission($this->model, 'actions'))
        {
            $this->flash->validation_error("You don't have permission to run <strong>". strtolower($this->model) ."</strong> actions.");
            $this->core->redirect('admin/welcome');
        }
        
        // Attemp to create the object
        $object = new $this->model($id);

		// Check if it exists
		if($object->failed())
			$this->core->abort('Requested record does not exist.', 'Record not found');
        
        // Admin tasks array must be declared and contain this function name
        if(!isset($object->model_actions) || !is_array($object->model_actions) || !isset($object->model_actions[$actionname]))
        {
            $this->flash->validation_error("The method <strong>". $actionname ."</strong> is not declared as a action at ". MODEL . strtolower($this->model) .".php");
            $this->core->redirect($this->link['controller'] .'/view/'. $id);
        }
        
        // Method must have name and description
        if(!is_string($object->model_actions[$actionname]['name']) || !is_string($object->model_actions[$actionname]['description']))
        {
            $this->flash->validation_error("The action <strong>". $actionname ."</strong> does not have name or description at ". MODEL . strtolower($this->model) .".php");
            $this->core->redirect($this->link['controller'] .'/view/'. $id);
        }

        // Method must exist
        if(!method_exists($object, $actionname))
        {
            $this->flash->validation_error("The method <strong>". $actionname ."</strong> does not exist at ". MODEL . strtolower($this->model) .".php");

            $this->core->redirect($this->link['controller'] .'/view/'. $id);
        }
        
        // Get parameters
        $method = new ReflectionMethod(get_class($object), $actionname);
        $params_original = $method->getParameters();

        // Parameters to view
        $params = array();

        // Class type of parameters
        $classes = array();

        // Clean params and set nice name
        foreach($params_original as $i => $name)
        {
            // Parameteter name
            $params[$i] = ucwords(str_replace('_', ' ', preg_replace('/(^.*\[.+\$|\].*$)/', '', $name)));

            // Class of this parameter using type hinting
            $class_hint = $name->getClass();
            
            // If class exists, get string field to populate
            if(class_exists($class_hint->name))
            {
                // Text field
                $text_field = $this->metadata->get_first_string_field($class_hint->name);

                // Classes
                $classes[$i] = array('name' => $class_hint->name, 'field' => $text_field);
            }

        }
        
        // Set Params
        $this->set('params',        $params);
        $this->set('classes',       $classes);
        
        // All good. Set data to view.
        $this->set('function',      $actionname);
        $this->set('actionname',    $object->model_actions[$actionname]['name']);
        $this->set('description',   $object->model_actions[$actionname]['description']);
        
        // Window title and modelname
        $this->setTitle(TITLE . CONNECTOR . "Scaffold ". CONNECTOR . $this->model_config->display . CONNECTOR . 
            "Actions ". CONNECTOR . ucwords($object->model_actions[$actionname]['name']));
        
        // Data to view
        $this->set('modelname', $this->model);
        $this->set('modeldisplay', $this->model_config->display);
        $this->set('model', $object->toArray());
        
        //--
        //-- Execute if no params nor confirmation is needed 
        //--
        
        $run_action_now = count($params) == 0 && isset($object->model_actions[$actionname]['expedite']) && $object->model_actions[$actionname]['expedite'];

        //--
        //-- Execution         
        //--

        // Execution
        if(isset($_POST['submit']) || $run_action_now)
        {
            if(!isset($_POST['params'])) $_POST['params'] = array();
            if(count($_POST['params']) == count($params))
            {
                // Prepare array
                $user_params = array();

                // If parameters are received
                if(is_array($_POST['params']))
                {
                    // Iteate them
                    for($i = 0; $i < count($_POST['params']); $i++)   
                    {
                        // If it must be an object
                        if(isset($classes[$i]))
                        {
                            $classname = $classes[$i]['name'];
                            $user_params[$i] = new $classname($_POST['params'][$i]);

                        // Plain
                        } else {
                            $user_params[$i] = $_POST['params'][$i];
                        }
                    }
                }
                
                // Execute
                $res = call_user_func_array(array($object, $actionname), $user_params);
                
                // If failed
                if($object->validation_failed())
                {
                    $verr = $object->get_validation_errors();
                    foreach($verr as $err) $this->flash->validation_error($err);
                }

                // If false return
                if(!$res) return;

                // OK
                $this->flash->success("The following action has been successfully executed.");
                $this->log->message("Action ". $this->model ."::". $actionname ." has been successfully executed.");

                // Executed it is
                $this->set('executed', true);
                
                // Set result if ok
                $this->set('res', $res);
            } else {
                $this->flash->validation_error("Parameters and inputs don't match");
            }
        } else {
            $this->set('executed', false);
        }

    }
    
    //--------------------------------------------------------
    
    /**
     * Finds out if this model is searchable and informs the view
     */
    protected function _is_searchable()
    {
        $this->set('is_searchable', $this->metadata->is_searchable($this->model));
    }
}
?>
